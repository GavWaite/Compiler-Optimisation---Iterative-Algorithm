# From https://gcc.gnu.org/onlinedocs/gcc/Optimize-Options.html

list_o1 = [
"-fauto-inc-dec",
"-fbranch-count-reg",
"-fcombine-stack-adjustments",
"-fcompare-elim",
"-fcprop-registers",
"-fdce",
"-fdefer-pop",
"-fdelayed-branch",
"-fdse",
"-fforward-propagate",
"-fguess-branch-probability",
"-fif-conversion2",
"-fif-conversion",
"-finline-functions-called-once",
"-fipa-pure-const",
"-fipa-profile",
"-fipa-reference",
"-fmerge-constants",
"-fmove-loop-invariants",
"-fomit-frame-pointer",
"-freorder-blocks",
"-fshrink-wrap",
"-fshrink-wrap-separate",
"-fsplit-wide-types",
"-fssa-backprop",
"-fssa-phiopt",
"-ftree-bit-ccp",
"-ftree-ccp",
"-ftree-ch",
"-ftree-coalesce-vars",
"-ftree-copy-prop",
"-ftree-dce",
"-ftree-dominator-opts",
"-ftree-dse",
"-ftree-forwprop",
"-ftree-fre",
"-ftree-phiprop",
"-ftree-sink",
"-ftree-slsr",
"-ftree-sra",
"-ftree-pta",
"-ftree-ter",
"-funit-at-a-time"
]

list_o2 = [
"-fthread-jumps",
"-falign-functions  -falign-jumps",
"-falign-loops  -falign-labels",
"-fcaller-saves",
"-fcrossjumping",
"-fcse-follow-jumps  -fcse-skip-blocks",
"-fdelete-null-pointer-checks",
"-fdevirtualize -fdevirtualize-speculatively",
"-fexpensive-optimizations",
"-fgcse  -fgcse-lm ",
"-fhoist-adjacent-loads",
"-finline-small-functions",
"-findirect-inlining",
"-fipa-cp",
"-fipa-bit-cp",
"-fipa-vrp",
"-fipa-sra",
"-fipa-icf",
"-fisolate-erroneous-paths-dereference",
"-flra-remat",
"-foptimize-sibling-calls",
"-foptimize-strlen",
"-fpartial-inlining",
"-fpeephole2",
"-freorder-blocks-algorithm=stc",
"-freorder-blocks-and-partition -freorder-functions",
"-frerun-cse-after-loop ",
"-fsched-interblock  -fsched-spec",
"-fschedule-insns  -fschedule-insns2",
"-fstore-merging",
"-fstrict-aliasing",
"-ftree-builtin-call-dce",
"-ftree-switch-conversion -ftree-tail-merge",
"-fcode-hoisting",
"-ftree-pre",
"-ftree-vrp",
"-fipa-r"
]

list_o3 = [
"-finline-functions",
"-funswitch-loops",
"-fpredictive-commoning",
"-fgcse-after-reload",
"-ftree-loop-vectorize",
"-ftree-loop-distribution",
"-ftree-loop-distribute-patterns",
"-floop-interchange",
"-fsplit-paths",
"-ftree-slp-vectorize",
"-fvect-cost-model",
"-ftree-partial-pre",
"-fpeel-loops",
"-fipa-cp-clone"
]

list_others = [
    "-faggressive-loop-optimizations",
    "-falign-functions",
    "-falign-jumps",
    "-falign-labels",
    "-falign-loops",
    "-fassociative-math",
    "-fauto-inc-dec",
    "-fbranch-probabilities",
    "-fbranch-target-load-optimize",
    "-fbranch-target-load-optimize2",
    "-fbtr-bb-exclusive",
    "-fcaller-saves",
    "-fcheck-data-deps",
    "-fcombine-stack-adjustments",
    "-fconserve-stack",
    "-fcompare-elim",
    "-fcprop-registers",
    "-fcrossjumping",
    "-fcse-follow-jumps",
    "-fcse-skip-blocks",
    "-fcx-fortran-rules",
    "-fcx-limited-range",
    "-fdata-sections",
    "-fdce",
    "-fdelayed-branch",
    "-fdelete-null-pointer-checks",
    "-fdevirtualize",
    "-fdse ",
    "-fearly-inlining",
    "-fipa-sra",
    "-fexpensive-optimizations",
    "-ffat-lto-objects",
    "-ffast-math",
    "-ffinite-math-only",
    "-ffloat-store",
    "-fforward-propagate",
    # "-ffp-contract=style",
    "-ffunction-sections",
    "-fgcse",
    "-fgcse-after-reload",
    "-fgcse-las",
    "-fgcse-lm",
    "-fgraphite-identity",
    "-fgcse-sm",
    "-fhoist-adjacent-loads",
    "-fif-conversion",
    "-fif-conversion2",
    "-findirect-inlining",
    "-finline-functions",
    "-finline-functions-called-once",
    # "-finline-limit=n",
    "-finline-small-functions",
    "-fipa-cp",
    "-fipa-cp-clone",
    "-fipa-pta",
    "-fipa-profile",
    "-fipa-pure-const",
    "-fipa-reference",
    # "-fira-region=region",
    "-fira-hoist-pressure",
    "-fira-loop-pressure",
    "-fno-ira-share-save-slots",
    "-fno-ira-share-spill-slots",
    "-fivopts",
    "-fkeep-inline-functions",
    "-fkeep-static-consts",
    "-floop-block",
    "-floop-interchange",
    "-floop-strip-mine",
    "-floop-nest-optimize",
    "-floop-parallelize-all",
    "-flto",
    #"-flto-compression-level",
    "-flto-report",
    "-fmerge-all-constants",
    "-fmerge-constants",
    "-fmodulo-sched",
    "-fmodulo-sched-allow-regmoves",
    "-fmove-loop-invariants",
    "-fmudflap",
    "-fmudflapir",
    "-fmudflapth",
    "-fno-branch-count-reg",
    "-fno-default-inline",
    "-fno-defer-pop",
    "-fno-function-cse",
    "-fno-guess-branch-probability",
    "-fno-inline",
    "-fno-math-errno",
    "-fno-peephole",
    "-fno-peephole2",
    "-fno-sched-interblock",
    "-fno-sched-spec",
    "-fno-signed-zeros",
    "-fno-toplevel-reorder",
    "-fno-trapping-math",
    "-fno-zero-initialized-in-bss",
    "-fomit-frame-pointer",
    "-foptimize-register-move",
    "-foptimize-sibling-calls",
    "-fpartial-inlining",
    "-fpeel-loops",
    "-fpredictive-commoning",
    "-fprefetch-loop-arrays",
    # "-fprofile-report ",
    "-fprofile-correction",
    "-fprofile-generate ",
    "-fprofile-use",
    "-fprofile-values ",
    "-freciprocal-math",
    "-free",
    "-fregmove",
    "-frename-registers",
    "-freorder-blocks",
    "-freorder-blocks-and-partition",
    "-freorder-functions",
    "-frerun-cse-after-loop",
    "-freschedule-modulo-scheduled-loops",
    "-frounding-math",
    "-fsched2-use-superblocks",
    "-fsched-pressure",
    "-fsched-spec-load",
    "-fsched-spec-load-dangerous",
    "-fsched-stalled-insns-dep",
    "-fsched-stalled-insns",
    "-fsched-group-heuristic",
    "-fsched-critical-path-heuristic",
    "-fsched-spec-insn-heuristic",
    "-fsched-rank-heuristic",
    "-fsched-last-insn-heuristic",
    "-fsched-dep-count-heuristic",
    "-fschedule-insns",
    "-fschedule-insns2",
    "-fsection-anchors",
    "-fselective-scheduling",
    "-fselective-scheduling2",
    "-fsel-sched-pipelining",
    "-fsel-sched-pipelining-outer-loops",
    "-fshrink-wrap",
    "-fsignaling-nans",
    "-fsingle-precision-constant",
    "-fsplit-ivs-in-unroller",
    "-fsplit-wide-types",
    "-fstack-protector",
    "-fstack-protector-all",
    "-fstrict-aliasing",
    "-fstrict-overflow",
    "-fthread-jumps",
    "-ftracer",
    "-ftree-bit-ccp",
    "-ftree-builtin-call-dce",
    "-ftree-ccp",
    "-ftree-ch",
    # "-ftree-coalesce-inline-vars",
    "-ftree-coalesce-vars",
    "-ftree-copy-prop",
    "-ftree-copyrename",
    "-ftree-dce",
    "-ftree-dominator-opts",
    "-ftree-dse ",
    "-ftree-forwprop",
    "-ftree-fre",
    "-ftree-loop-if-convert",
    "-ftree-loop-if-convert-stores",
    "-ftree-loop-im",
    "-ftree-phiprop",
    "-ftree-loop-distribution",
    "-ftree-loop-distribute-patterns",
    "-ftree-loop-ivcanon",
    "-ftree-loop-linear",
    "-ftree-loop-optimize",
    "-ftree-pre",
    "-ftree-partial-pre",
    "-ftree-pta",
    "-ftree-reassoc",
    "-ftree-sink",
    "-ftree-slsr",
    "-ftree-sra",
    "-ftree-switch-conversion",
    "-ftree-tail-merge",
    "-ftree-ter",
    "-ftree-vect-loop-version",
    "-ftree-vectorize",
    "-ftree-vrp",
    "-funit-at-a-time",
    "-funroll-all-loops",
    "-funroll-loops",
    "-funsafe-loop-optimizations",
    "-funsafe-math-optimizations",
    "-funswitch-loops",
    "-fvariable-expansion-in-unroller",
    "-fvect-cost-model",
    "-fvpt",
    "-fweb",
    # "-fwhole-program",
    # "-fwpa",
    # "-fuse-linker-plugin"
]

list_okay = [
    "-faggressive-loop-optimizations",
    "-falign-functions",
    "-falign-jumps",
    "-falign-labels",
    "-falign-loops",
    "-fassociative-math",
    "-fauto-inc-dec",
    "-fbranch-target-load-optimize2",
    "-fbtr-bb-exclusive",
    "-fcaller-saves",
    "-fcheck-data-deps",
    "-fcombine-stack-adjustments",
    "-fconserve-stack",
    "-fcompare-elim",
    "-fcprop-registers",
    "-fcrossjumping",
    "-fcse-follow-jumps",
    "-fcse-skip-blocks",
    "-fcx-fortran-rules",
    "-fcx-limited-range",
    "-fdata-sections",
    "-fdce",
    "-fdelayed-branch",
    "-fdelete-null-pointer-checks",
    "-fdevirtualize",
    "-fearly-inlining",
    "-ffast-math",
    "-ffinite-math-only",
    "-ffloat-store",
    "-fforward-propagate",
    # "-ffp-contract=style",
    "-ffunction-sections",
    "-fgcse",
    "-fgcse-after-reload",
    "-fgcse-lm",
    "-fgraphite-identity",
    "-fgcse-sm",
    "-fhoist-adjacent-loads",
    "-fif-conversion",
    "-fif-conversion2",
    "-finline-functions",
    "-finline-functions-called-once",
    # "-finline-limit=n",
    "-finline-small-functions",
    "-fipa-cp-clone",
    "-fipa-pta",
    "-fipa-profile",
    "-fipa-pure-const",
    "-fipa-reference",
    # "-fira-region=region",
    "-fira-hoist-pressure",
    "-fira-loop-pressure",
    "-fno-ira-share-spill-slots",
    "-fivopts",
    "-fkeep-static-consts",
    "-floop-block",
    "-floop-interchange",
    "-floop-strip-mine",
    "-floop-nest-optimize",
    "-flto",
    "-flto-report",
    "-fmerge-all-constants",
    "-fmerge-constants",
    "-fmove-loop-invariants",
    "-fmudflapth",
    "-fno-branch-count-reg",
    "-fno-default-inline",
    "-fno-defer-pop",
    "-fno-function-cse",
    "-fno-inline",
    "-fno-math-errno",
    "-fno-peephole",
    "-fno-peephole2",
    "-fno-sched-spec",
    "-fno-toplevel-reorder",
    "-fno-trapping-math",
    "-fomit-frame-pointer",
    "-foptimize-register-move",
    "-foptimize-sibling-calls",
    "-fpeel-loops",
    "-fpredictive-commoning",
    "-fprefetch-loop-arrays",
    "-fprofile-values ",
    "-freciprocal-math",
    "-free",
    "-fregmove",
    "-frename-registers",
    "-freorder-blocks",
    "-freorder-blocks-and-partition",
    "-freorder-functions",
    "-frerun-cse-after-loop",
    "-freschedule-modulo-scheduled-loops",
    "-frounding-math",
    "-fsched2-use-superblocks",
    "-fsched-pressure",
    "-fsched-spec-load",
    "-fsched-spec-load-dangerous",
    "-fsched-stalled-insns-dep",
    "-fsched-stalled-insns",
    "-fsched-group-heuristic",
    "-fsched-critical-path-heuristic",
    "-fsched-spec-insn-heuristic",
    "-fsched-rank-heuristic",
    "-fsched-last-insn-heuristic",
    "-fsched-dep-count-heuristic",
    "-fschedule-insns2",
    "-fsection-anchors",
    "-fselective-scheduling",
    "-fselective-scheduling2",
    "-fsel-sched-pipelining",
    "-fsel-sched-pipelining-outer-loops",
    "-fshrink-wrap",
    "-fsplit-wide-types",
    "-fstack-protector",
    "-fstack-protector-all",
    "-fstrict-aliasing",
    "-fstrict-overflow",
    "-fthread-jumps",
    "-ftracer",
    "-ftree-bit-ccp",
    "-ftree-builtin-call-dce",
    "-ftree-ccp",
    "-ftree-ch",
    "-ftree-coalesce-vars",
    "-ftree-copy-prop",
    "-ftree-copyrename",
    "-ftree-dce",
    "-ftree-dominator-opts",
    "-ftree-dse ",
    "-ftree-forwprop",
    "-ftree-fre",
    "-ftree-loop-if-convert",
    "-ftree-phiprop",
    "-ftree-loop-distribution",
    "-ftree-loop-distribute-patterns",
    "-ftree-loop-ivcanon",
    "-ftree-loop-linear",
    "-ftree-loop-optimize",
    "-ftree-pre",
    "-ftree-partial-pre",
    "-ftree-pta",
    "-ftree-reassoc",
    "-ftree-sink",
    "-ftree-slsr",
    "-ftree-sra",
    "-ftree-switch-conversion",
    "-ftree-tail-merge",
    "-ftree-ter",
    "-ftree-vectorize",
    "-ftree-vrp",
    "-funit-at-a-time",
    "-funroll-all-loops",
    "-funroll-loops",
    "-funsafe-loop-optimizations",
    "-funsafe-math-optimizations",
    "-funswitch-loops",
    "-fvariable-expansion-in-unroller",
    "-fvect-cost-model",
    "-fvpt",
    "-fweb"
]
# -"fira-algorithm=algorithm 
# -fexcess-precision=style 
# -fprofile-dir=path
# -fprofile-use=path
# -fuse-ld=linker
# --param name=value
# -fprofile-generate=path 
# "-flto-partition=alg",
    # "-ftree-parallelize-loops=n",
    # "-fira-verbose=n",








# default_on = [
#     "-fforward-propagate",
#     "-fomit-frame-pointer",
#     "-foptimize-sibling-calls",
#     "-foptimize-strlen",
#     "-finline-small-functions",
#     "-findirect-inlining",
#     "-finline-functions",
#     "-finline-functions-called-once",
#     "-fearly-inlining",
#     "-fipa-sra",
#     "-fkeep-static-consts",
#     "-fmerge-constants",
#     "-fthread-jumps",
#     "-fsplit-wide-types",
#     "-fcse-follow-jumps",



# ]

# no = [
#     "-fno-defer-pop",
#     "-fno-branch-count-reg",
#     "-fno-function-cse",
#     "-fno-zero-initialized-in-bss",
#     "-fno-keep-inline-dllexport",
# ]

# others = [
    
#     "-fgcse-sm",
#     "-fgcse-las",
#     "-fgcse-after-reload",
#     "-funconstrained-commons",
#     "-fdevirtualize-speculatively",
#     "-flive-range-shrinkage",
#     "-fsched-pressure",
#     "-fsched-spec-load",




new_list = [
    "-fno-inline-functions", ##
    "-fno-unswitch-loops", 
    "-fno-predictive-commoning", 
    "-fno-gcse-after-reload", 
    "-fno-tree-loop-vectorize", 
    "-fno-tree-loop-distribution", 
    "-fno-tree-loop-distribute-patterns", ##
    "-fno-loop-interchange", 
    "-fno-split-paths", 
    "-fno-tree-slp-vectorize", 
    "-fno-vect-cost-model", 
    "-fno-tree-partial-pre", ##
    "-fno-peel-loops", 
    "-fno-ipa-cp-clone"
]

compile_errors =[
    "-fno-keep-inline-dllexport",
    "-fnotree-partial-pre",
    "-fnotree-loop-distribute-patterns",
]

try_again = [
    "-fno-tree-partial-pre",
    "-fno-tree-loop-distribute-patterns"
]

run_errors = [
    "-fsingle-precision-constant",
]

new_new_list = [
    "-fkeep-inline-functions",
    "-fkeep-static-functions",
    "-fmerge-all-constants",
    "-fmodulo-sched",
    "-fgcse-sm",
    "-fgcse-las",
    '-fgcse-after-reload',
    "-fdevirtualize-speculatively",
    "-flive-range-shrinkage",
    "-fno-defer-pop",
    # "-fno-keep-inline-dllexport",
    "-fno-function-cse",
    "-fno-inline",
    "-fno-inline-functions",
    "-fno-zero-initialized-in-bss",
    "-fno-ira-share-save-slots",
    "-fno-ira-share-spill-slots",
    # "-fnotree-loop-distribute-patterns",
    "-fno-predictive-commoning",
    "-fno-ipa-cp-clone",
    "-fsched-pressure",
    "-fsched-spec-load",
    "-fsched-spec-load-dangerous",
    "-fsched-stalled-insns",
    "-fsched-stalled-insns-dep",
    "-fsched2-use-superblocks",
    "-fsched-group-heuristic",
    "-fsched-critical-path-heuristic",
    "-fsched-spec-insn-heuristic",
    "-fsched-rank-heuristic",
    "-fsched-last-insn-heuristic",
    "-fsched-dep-count-heuristic",
    "-freschedule-modulo-scheduled-loops",
    "-fselective-scheduling",
    "-fselective-scheduling2",
    "-fconserve-stack",
    # "-fnotree-partial-pre",
    "-fipa-pta",
    "-fisolate-erroneous-paths-attribute",
    "-floop-nest-optimize",
    "-floop-parallelize-all",
    "-floop-interchange",
    "-ftree-loop-im",
    "-ftree-loop-ivcanon",
    "-fivopts",
    "-ftree-parallelize-loops=16",
    "-ftree-vectorize",
    "-fvariable-expansion-in-unroller",
    "-fprefetch-loop-arrays",
    "-flimit-function-alignment",
    "-fweb",
    "-flto",
    "-fprofile-correction",
    # "-fsingle-precision-constant",
    "-fcx-limited-range",
    "-fbranch-probabilities",
    "-fvpt",
    "-frename-registers",
    "-funroll-loops",
    "-funroll-all-loops",
    "-fprofile-use",
    "-fpeel-loops",
    "-fsplit-loops",
    "-funswitch-loops",
    "-floop-unroll-and-jam",
    "-fbranch-target-load-optimize",
    "-fbranch-target-load-optimize2",
    "-fbtr-bb-exclusive",
    "-fstdarg-opt",
    "-fsection-anchors"
]